{"mappings":"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","sources":["src/js/modal.js","src/js/storage-utils.js","src/js/watched-list.js","src/js/queued-list.js","src/templates/renderModalCard.js"],"sourcesContent":["import FilmsLoadService from './films-request';\nimport renderModalCard from '../templates/renderModalCard';\nimport {\n  addWatchedBtnListener,\n  removeWatchedBtnListener,\n} from './watched-list';\nimport Notiflix from 'notiflix';\n\n// імпорт для кнопки add to queue\nimport { addQueuedBtnListener, removeQueuedBtnListener } from './queued-list';\n\nconst refs = {\n  modal: document.querySelector('[data-modal]'),\n  closeModalBtn: document.querySelector('[data-modal-close]'),\n  listOfFilm: document.querySelector('.film__list'),\n  card: document.querySelector('.modal__container'),\n  body: document.querySelector('body'),\n};\n\nrefs.listOfFilm.addEventListener('click', onClickFilm);\nrefs.closeModalBtn.addEventListener('click', onCloseModal);\nrefs.modal.addEventListener('click', onClickBackdropModalClose);\n\nasync function onClickFilm(e) {\n  try {\n    const chosenFilm = e.target.parentNode.parentNode;\n\n  const fls = new FilmsLoadService();\n  fls.id = chosenFilm.id;\n  const data = await fls.requestFilmDetails();\n\n  if (chosenFilm.nodeName !== 'LI') {\n    return;\n  }\n\n  refs.card.innerHTML = renderModalCard(data);\n    onOpenModal();\n  }\n  catch (err) {\n    console.error('Set state error: ', err.message);\n    Notiflix.Notify.failure('Sorry some problems on Server');\n  }\n}\n\nfunction onOpenModal() {\n  window.addEventListener('keydown', inKeyDownEscModalClose);\n  refs.modal.classList.toggle('backdrop--is-hidden');\n  refs.body.classList.toggle('modal-open');\n  addWatchedBtnListener();\n  addQueuedBtnListener();\n}\n\nfunction onCloseModal() {\n  window.removeEventListener('keydown', inKeyDownEscModalClose);\n  refs.modal.classList.toggle('backdrop--is-hidden');\n  refs.body.classList.toggle('modal-open');\n  removeWatchedBtnListener();\n  removeQueuedBtnListener();\n}\n\nfunction onClickBackdropModalClose(event) {\n  if (event.target === event.currentTarget) {\n    onCloseModal();\n  }\n}\n\nfunction inKeyDownEscModalClose(event) {\n  const KEY_CODE_ESCAPE = 'Escape';\n\n  if (event.code === KEY_CODE_ESCAPE) {\n    onCloseModal();\n  }\n}\n","import Notiflix from 'notiflix';\nimport { changeBtnStatus } from './watched-list';\nimport {changeBtnStatusQueue} from './queued-list';\n\nNotiflix.Notify.init({\n  width: '280px',\n  position: 'center-top',\n  distance: '10px',\n  opacity: 1,\n  zindex: 9999,\n  timeout: 1000,\n});\n\n// ********** функции сохранения и считывания масива просмотренных фильмов из local storage\nconst saveList = (key, value, typeBtn) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n    typeBtn == true\n      ? Notiflix.Notify.success('Your movie has been added to the library')\n      : Notiflix.Notify.success('Your movie remove from library');\n    changeBtnStatus();\n\n    // for queue btn\n    // changeBtnStatusQueue ();\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n    Notiflix.Notify.failure('Failed to add to library');\n  }\n};\n\nconst saveListQ = (key, value, typeBtnQ) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n    typeBtnQ == true\n      ? Notiflix.Notify.success('Your movie has been added to the queued')\n      : Notiflix.Notify.success('Your movie remove from queued');\n      changeBtnStatusQueue ();\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n    Notiflix.Notify.failure('Failed to add to Queue');\n  }\n};\n\nconst loadList = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\nexport { saveList, loadList };\n\nconst loadListQ = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error('Get state error: ', error.message);\n  }\n};\nexport { saveListQ, loadListQ };\n\n","import FilmsLoadService from './films-request';\nimport { saveList, loadList } from './storage-utils';\n\n// створюємо змінну масиву фільмів і ключ для сховища, екземпляр класу для роботи з api\n\nconst moviesLoad = new FilmsLoadService();\nconst watchedKeyStorage = 'watchedKey';\nexport default watchedKeyStorage;\n\nlet watchedBtnEl;\n// функція додає слухача на кнопку \"add to watched\"\nexport function addWatchedBtnListener() {\n  watchedBtnEl = document.querySelector('.add-watchedbtn-js');\n  watchedBtnEl.addEventListener('click', addWatchedBtnClick);\n}\n\n// фукція видаляє слухача з кнопки \"add to watched\"\nexport function removeWatchedBtnListener() {\n  watchedBtnEl.removeEventListener('click', addWatchedBtnClick);\n}\n\n// функція-обробник події кліку на \"add to watched\"\n// кнопка повинна мати атрібути data-id з айді картки фільму , та data-action з \"add\" або \"remove\"\nfunction addWatchedBtnClick(evt) {\n  const idData = evt.target.dataset.id;\n  const action = evt.target.dataset.action;\n  switch (action) {\n    case 'add':\n      onWatchedList(idData);\n      break;\n    case 'remove':\n      removeItemFromList(idData);\n      break;\n  }\n}\n\n// функція перевірки наявності фільму у переліку, використовуємо при рендері одного фільму\n//  і надання потрібного атрибуту кнопці data-action\nexport function isMovieOnList(movieId) {\n  const items = loadList(watchedKeyStorage);\n  if (!items) {\n    return 'add';\n  }\n  const index = items.findIndex(item => item.id === movieId);\n  return index === -1 ? 'add' : 'remove';\n}\n\n// отримуємо об'єкт фільму\nasync function onWatchedList(movieId) {\n  try {\n    moviesLoad.id = movieId;\n    const response = await moviesLoad.requestFilmDetails();\n    response['genre_ids'] = response['genres'].map(obj => obj.id);\n    addItemToList(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n// додаємо до переліку\nfunction addItemToList(data) {\n  const items = loadList(watchedKeyStorage);\n  if (!items || items.length == 0) {\n    const storageListArray = [];\n    storageListArray.push(data);\n    saveList(watchedKeyStorage, storageListArray, true);\n  } else {\n    items.push(data);\n    saveList(watchedKeyStorage, items, true);\n  }\n}\n\n// видаляємо з переліку\nfunction removeItemFromList(movieId) {\n  const items = loadList(watchedKeyStorage);\n\n  const index = items.findIndex(item => item.id === Number(movieId));\n\n  if (index === -1) {\n    return;\n  }\n  items.splice(index, 1);\n  saveList(watchedKeyStorage, items);\n  // onCloseModal();\n}\n// button change\nexport function changeBtnStatus() {\n  const statusBtn = watchedBtnEl.dataset.action;\n  statusBtn === 'add'\n    ? ((watchedBtnEl.dataset.action = 'remove'),\n      (watchedBtnEl.textContent = 'delete from watched'))\n    : ((watchedBtnEl.dataset.action = 'add'),\n      (watchedBtnEl.textContent = 'add to Watched'));\n}\nexport { watchedKeyStorage };\n","import FilmsLoadService from './films-request';\nimport { saveListQ, loadListQ } from './storage-utils';\nimport Notiflix from 'notiflix';\nNotiflix.Notify.init({\n  width: '280px',\n  position: 'center-top',\n  distance: '10px',\n  opacity: 1,\n});\n\n// створюємо змінну масиву фільмів і ключ для сховища, екземпляр класу для роботи з api\n\nconst moviesLoads = new FilmsLoadService();\nconst queuedKeyStorage = 'queuedKey';\nexport default queuedKeyStorage;\n\nlet queuedBtnEl;\n// функція додає слухача на кнопку \"Added to queued\"\n\nexport function addQueuedBtnListener() {\n   queuedBtnEl = document.querySelector('.add-queuedbtn-js');\n   queuedBtnEl.addEventListener('click', addQueuedBtnClick);\n}\n// фукція видаляє слухача з кнопки \"Added to queued\"\n\nexport function removeQueuedBtnListener() {\n   queuedBtnEl.removeEventListener('click', addQueuedBtnClick);\n}\n\n// функція-обробник події кліку на \"Added to queued\"\n\nfunction addQueuedBtnClick(evt) {\n  const idData = evt.target.dataset.id\n  console.log(evt.target);\n\n  const action = evt.target.dataset.action;\n  switch (action) {\n    case 'add':\n      onQueuedList(idData);\n      break;\n    case 'remove':\n      removeItemFromList(idData);\n      break;\n  }\n}\n\n// функція перевірки наявності фільму у переліку\n\nexport function isMovieOnListQue(movieId) {\n  const items = loadListQ(queuedKeyStorage);\n  if (!items) {\n    return 'add';\n  }\n  const index = items.findIndex(item => item.id === movieId);\n  return index === -1 ? 'add' : 'remove';\n}\n\n// отримуємо об'єкт фільму\nasync function onQueuedList(movieId) {\n  try {\n    moviesLoads.id = movieId;\n    // console.log('moviesLoads', moviesLoads.id);\n\n    const response = await moviesLoads.requestFilmDetails();\n    response['genre_ids'] = response['genres'].map(obj => obj.id);\n    // console.log(response);\n    addItemToList(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n// додаємо до переліку - Your movie is added to queued\n\nfunction addItemToList(data) {\n  const items = loadListQ(queuedKeyStorage);\n  if (!items || items.length == 0) {\n    const storageListArray = [];\n    storageListArray.push(data);\n    saveListQ(queuedKeyStorage, storageListArray, true);\n  } else {\n    items.push(data);\n    saveListQ(queuedKeyStorage, items, true);\n  }\n}\n\n// видаляємо з переліку\nfunction removeItemFromList(movieId) {\n  const items = loadListQ(queuedKeyStorage);\n  const index = items.findIndex(item => item.id === Number(movieId));\n\n  if (index === -1) {\n    return;\n  }\n  items.splice(index, 1);\n  saveListQ(queuedKeyStorage, items);\n}\nexport function changeBtnStatusQueue() {\n  const statusBtnQ = queuedBtnEl.dataset.action;\n  statusBtnQ === 'add'\n    ? ((queuedBtnEl.dataset.action = 'remove'),\n      (queuedBtnEl.textContent = 'delete from queued'))\n    : ((queuedBtnEl.dataset.action = 'add'),\n      (queuedBtnEl.textContent = 'add to queued'));\n}\nexport { queuedKeyStorage };\n\n","import { isMovieOnList } from '../js/watched-list';\nimport {isMovieOnListQue} from '../js/queued-list'\nconst BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport default function renderModalCard(film, dataAtribute) {\n  const {\n    id,\n    genres,\n    vote_average,\n    vote_count,\n    poster_path,\n    popularity,\n    original_title,\n    overview,\n    title,\n  } = film;\n\n  let watchedBtnText;\n  const watchedBtnAction = isMovieOnList(id);\n  watchedBtnAction === 'add'\n    ? (watchedBtnText = 'add to Watched')\n    : (watchedBtnText = 'delete from watched');\n  \n  let queueBtnText;\n  const queueBtnAction = isMovieOnListQue(id);\n  queueBtnAction === 'add'\n    ? (queueBtnText = 'add to Queued')\n    : (queueBtnText = 'delete from Queued');\n  \n  \n\n  let poster = '';\n  if (poster_path === null) {\n    poster =  `src = \"https://upload.wikimedia.org/wikipedia/commons/4/43/Illustration_of_an_image.png\"`\n    } else poster = `src =\"${BASE_URL}${poster_path}\"`  \n  \n  return `<div class=\"modal__image-container\" id='${id} data='${dataAtribute}'>\n        <img\n          class=\"modal__image\"\n          ${poster}\n          alt=\"Poster ${title}\"\n        />\n      </div>\n    <div class=\"film__info\">\n        <h2 class=\"film__title\">${addAudit(title)}</h2>\n        <ul class=\"film-modal__list\">\n          <li class=\"film__item\">\n            <p class=\"film__details\">Vote / Votes</p>\n            <p class=\"film__value\">\n              <span class=\"film__rating--orange\">${addAudit(\n                vote_average.toFixed(1)\n              )}</span>\n              <span class=\"film__rating--slash\"> / </span>\n              <span class=\"vote-count\">${addAudit(vote_count)}</span>\n            </p>\n          </li>\n          <li class=\"film__item\">\n            <p class=\"film__details\">Popularity</p>\n            <p class=\"film__value\">${addAudit(popularity.toFixed(1))}</p>\n          </li>\n          <li class=\"film__item\">\n            <p class=\"film__details\">Original title</p>\n            <p class=\"film__value\">${addAudit(original_title)}</p>\n          </li>\n          <li class=\"film__item\">\n            <p class=\"film__details\">Genre</p>\n            <p class=\"film__value\">${addAudit(ganresString(genres))}</p>\n          </li>\n        </ul>\n        <div class=\"film-about__wrapper\">\n          <h3 class=\"film-about__title\">About</h3>\n          <div class=\"film-about-text__wrapper\">\n            <p class=\"film-about__text\">\n            ${addAudit(overview)}\n            </p>\n          </div>\n          <div class=\"film-btn__wrapper\">\n            <button class=\"film-button add-watchedbtn-js\" type=\"button\" data-id=\"${id}\" data-action=\"${watchedBtnAction}\" >${watchedBtnText}</button>\n            <button class=\"film-button add-queuedbtn-js\" type=\"button\" data-id=\"${id}\" data-action=\"${queueBtnAction}\" >${queueBtnText}</button>\n          </div>\n        </div>`;\n}\n\nfunction ganresString(id) {\n  return id.map(({ name }) => name).join(', ');\n}\n\nfunction addAudit(string) {\n  if (string.length === 0) {\n    return 'no_info';\n  }\n  return string;\n}\n\n"],"names":["$ek61Q","parcelRequire","$eWCmQ","$parcel$interopDefault","Notify","init","width","position","distance","opacity","$1597878cfb3da1a8$var$moviesLoads","default","$1597878cfb3da1a8$var$queuedBtnEl","$1597878cfb3da1a8$var$addQueuedBtnClick","evt","idData","target","dataset","id","console","log","action","async","movieId","response","requestFilmDetails","map","obj","data","items","$8703042ced86b28f$export$ccd8fe2f411bb2ad","length","push","$8703042ced86b28f$export$ee642fdc70f42802","storageListArray","$1597878cfb3da1a8$var$addItemToList","error","$1597878cfb3da1a8$var$onQueuedList","index","findIndex","item","Number","splice","$1597878cfb3da1a8$var$removeItemFromList","$1597878cfb3da1a8$export$379d139f74994ef2","zindex","timeout","$8703042ced86b28f$export$218911bd4c8f0227","key","value","typeBtn","serializedState","JSON","stringify","localStorage","setItem","success","$006dc6919d21442f$export$75d90ec238065d96","message","failure","typeBtnQ","textContent","$8703042ced86b28f$export$ecc906937858f8cf","getItem","undefined","parse","$006dc6919d21442f$var$moviesLoad","$006dc6919d21442f$var$watchedBtnEl","$006dc6919d21442f$var$addWatchedBtnClick","$006dc6919d21442f$var$addItemToList","$006dc6919d21442f$var$onWatchedList","$006dc6919d21442f$var$removeItemFromList","$006dc6919d21442f$export$40d550ad408efe2","$da97e4b02241c8f4$export$2e2bcd8739ae039","film","dataAtribute","genres","vote_average","vote_count","poster_path","popularity","original_title","overview","title","watchedBtnText","watchedBtnAction","queueBtnText","queueBtnAction","poster","$da97e4b02241c8f4$var$addAudit","toFixed","name","join","$da97e4b02241c8f4$var$ganresString","string","$8a7e756c566dd1ea$var$refs","modal","document","querySelector","closeModalBtn","listOfFilm","card","body","$8a7e756c566dd1ea$var$onCloseModal","window","removeEventListener","$8a7e756c566dd1ea$var$inKeyDownEscModalClose","classList","toggle","event","code","addEventListener","e","chosenFilm","parentNode","fls","nodeName","innerHTML","err","currentTarget"],"version":3,"file":"index.3936fa8c.js.map"}